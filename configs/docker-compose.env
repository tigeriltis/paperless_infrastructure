# The UID and GID of the user used to run paperless in the container. Set this
# to your UID and GID on the host so that you have write access to the
# consumption directory.
#USERMAP_UID=1000
#USERMAP_GID=1000

# Additional languages to install for text recognition, separated by a
# whitespace. Note that this is
# different from PAPERLESS_OCR_LANGUAGE (default=eng), which defines the
# language used for OCR.
# The container installs English, German, Italian, Spanish and French by
# default.
# See https://packages.debian.org/search?keywords=tesseract-ocr-&searchon=names&suite=buster
# for available languages.
#PAPERLESS_OCR_LANGUAGES=tur ces
## deutsch, fraktur, english
PAPERLESS_OCR_LANGUAGES=deu frk eng

###############################################################################
# Paperless-specific settings                                                 #
###############################################################################

# All settings defined in the paperless.conf.example can be used here. The
# Docker setup does not use the configuration file.
# A few commonly adjusted settings are provided below.

# This is required if you will be exposing Paperless-ngx on a public domain
# (if doing so please consider security measures such as reverse proxy)
#PAPERLESS_URL=https://paperless.example.com
#PAPERLESS_URL=https://harpune.fritz.box:8000

# Adjust this key if you plan to make paperless available publicly. It should
# be a very long sequence of random characters. You don't need to remember it.
#PAPERLESS_SECRET_KEY=change-me

# Use this variable to set a timezone for the Paperless Docker containers. If not specified, defaults to UTC.
PAPERLESS_TIME_ZONE=Europe/Berlin

# The default language to use for OCR. Set this to the language most of your
# documents are written in.
#PAPERLESS_OCR_LANGUAGE=eng
PAPERLESS_OCR_LANGUAGE=deu

# Set if accessing paperless via a domain subpath e.g. https://domain.com/PATHPREFIX and using a reverse-proxy like traefik or nginx
#PAPERLESS_FORCE_SCRIPT_NAME=/PATHPREFIX
#PAPERLESS_STATIC_URL=/PATHPREFIX/static/ # trailing slash required




# Default admin user and admin password ... only during initial creation
#PAPERLESS_ADMIN_USER=root
#PAPERLESS_ADMIN_PASSWORD=pass

# Enable recursive watching of the consumption directory. Paperless will then pickup files from files in subdirectories within your consumption directory as well.
# Defaults to false.
PAPERLESS_CONSUMER_RECURSIVE=true


# Set the names of subdirectories as tags for consumed files. E.g. <CONSUMPTION_DIR>/foo/bar/file.pdf will add the tags "foo" and "bar" to the consumed file. Paperless will create any tags that don't exist yet.
# This is useful for sorting documents with certain tags such as car or todo prior to consumption. These folders won't be deleted.
# PAPERLESS_CONSUMER_RECURSIVE must be enabled for this to work.
# Defaults to false.
PAPERLESS_CONSUMER_SUBDIRS_AS_TAGS=true


# Paperless will check the document text for document date information. Use this setting to enable checking the document filename for date information. The date order can be set to any option as specified in https://dateparser.readthedocs.io/en/latest/settings.html#date-order. The filename will be checked first, and if nothing is found, the document text will be checked as normal.
# A date in a filename must have some separators (., ,, -, /, etc) for it to be parsed.
# Defaults to none, which disables this feature.
PAPERLESS_FILENAME_DATE_ORDER=YMD


# After some initial validation, Paperless can trigger an arbitrary script if you like before beginning consumption. This script will be provided data for it to work with via the environment.
# For more information, take a look at pre-consumption script.
# The default is blank, which means nothing will be executed.
#PAPERLESS_PRE_CONSUME_SCRIPT=<filename>

# After a document is consumed, Paperless can trigger an arbitrary script if you like. This script will be provided data for it to work with via the environment.
# For more information, take a look at Post-consumption script.
# The default is blank, which means nothing will be executed.
PAPERLESS_POST_CONSUME_SCRIPT=/usr/src/paperless/scripts/post_consume_wrapper.sh

## Polling
# If paperless won't find documents added to your consume folder, it might not be able to automatically detect filesystem changes. In that case, specify a polling interval in seconds here, which will then cause paperless to periodically check your consumption directory for changes. This will also disable listening for file system changes with inotify.
# Defaults to 0, which disables polling and uses filesystem notifications.
PAPERLESS_CONSUMER_POLLING=10

# If consumer polling is enabled, sets the maximum number of times paperless will check for a file to remain unmodified. If a file's modification time and size are identical for two consecutive checks, it will be consumed.
# Defaults to 5.
PAPERLESS_CONSUMER_POLLING_RETRY_COUNT=10

# If consumer polling is enabled, sets the delay in seconds between each check (above) paperless will do while waiting for a file to remain unmodified.
# Defaults to 5.
PAPERLESS_CONSUMER_POLLING_DELAY=10


# When the consumer detects a duplicate document, it will not touch the original document. This default behavior can be changed here.
# Defaults to false.
PAPERLESS_CONSUMER_DELETE_DUPLICATES=true

# Changes the filenames paperless uses to store documents in the media directory. See File name handling for details.
# Default is none, which disables this feature.
PAPERLESS_FILENAME_FORMAT={owner_username}/{correspondent}/{created_year}/{original_name}
# However, when changing PAPERLESS_FILENAME_FORMAT you will need to manually run the document renamer to move any existing documents. This can be done with the command document_renamer.
# sudo docker compose exec webserver document_renamer


# Paperless does multiple things in the background: Maintain the search index, maintain the automatic matching algorithm, check emails, consume documents, etc. This variable specifies how many things it will do in parallel.
# Defaults to 1
PAPERLESS_TASK_WORKERS=2

# Furthermore, paperless uses multiple threads when consuming documents to speed up OCR. This variable specifies how many pages paperless will process in parallel on a single document.
# Warning
# Ensure that the product
# PAPERLESS_TASK_WORKERS * PAPERLESS_THREADS_PER_WORKER
# does not exceed your CPU core count or else paperless will be extremely slow. If you want paperless to process many documents in parallel, choose a high worker count. If you want paperless to process very large documents faster, use a higher thread per worker count.
# The default is a balance between the two, according to your CPU core count, with a slight favor towards threads per worker:
#PAPERLESS_THREADS_PER_WORKER=<num>


# As of now, if you try to import a digitally signed PDF into paperless, you get the error: DigitalSignatureError: Input PDF has a digital signature. OCR would alter the document, invalidating the signature. This is just the normal and sound behavior of OCRmyPDF, who refuses to invalidate the digital signature by doing adding OCR to it.# In your Paperless configuration ( https://docs.paperless-ngx.com/configuration/ ) set:
# This is based on https://ocrmypdf.readthedocs.io/en/latest/pdfsecurity.html#digital-signatures, and I agree with @amo13 that this is fine, given paperless keeps the original.

# SubprocessOutputError: Ghostscript PDF/A rendering failed, consider setting PAPERLESS_OCR_USER_ARGS: '{"continue_on_soft_render_error": true}'

PAPERLESS_OCR_USER_ARGS='{"invalidate_digital_signatures": true, "continue_on_soft_render_error": true}'
